// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: board.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Board.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - BoardRoot

@implementation BoardRoot

// No extensions in the file and no imports, so no need to generate
// +extensionRegistry.

@end

#pragma mark - BoardRoot_FileDescriptor

static GPBFileDescriptor *BoardRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Board

@implementation Board

@dynamic boardId;
@dynamic userId;
@dynamic boardType;
@dynamic boardUniversity;
@dynamic boardMajor;
@dynamic boardTitle;
@dynamic boardContent;
@dynamic boardTouchCount;
@dynamic boardCommentCount;
@dynamic boardCreated;
@dynamic userNickname;

typedef struct Board__storage_ {
  uint32_t _has_storage_[1];
  NSString *boardType;
  NSString *boardUniversity;
  NSString *boardMajor;
  NSString *boardTitle;
  NSString *boardContent;
  NSString *boardCreated;
  NSString *userNickname;
  int64_t boardId;
  int64_t userId;
  int64_t boardTouchCount;
  int64_t boardCommentCount;
} Board__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "boardId",
        .dataTypeSpecific.className = NULL,
        .number = Board_FieldNumber_BoardId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Board__storage_, boardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = Board_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Board__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "boardType",
        .dataTypeSpecific.className = NULL,
        .number = Board_FieldNumber_BoardType,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Board__storage_, boardType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "boardUniversity",
        .dataTypeSpecific.className = NULL,
        .number = Board_FieldNumber_BoardUniversity,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Board__storage_, boardUniversity),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "boardMajor",
        .dataTypeSpecific.className = NULL,
        .number = Board_FieldNumber_BoardMajor,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Board__storage_, boardMajor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "boardTitle",
        .dataTypeSpecific.className = NULL,
        .number = Board_FieldNumber_BoardTitle,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Board__storage_, boardTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "boardContent",
        .dataTypeSpecific.className = NULL,
        .number = Board_FieldNumber_BoardContent,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Board__storage_, boardContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "boardTouchCount",
        .dataTypeSpecific.className = NULL,
        .number = Board_FieldNumber_BoardTouchCount,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(Board__storage_, boardTouchCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "boardCommentCount",
        .dataTypeSpecific.className = NULL,
        .number = Board_FieldNumber_BoardCommentCount,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(Board__storage_, boardCommentCount),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "boardCreated",
        .dataTypeSpecific.className = NULL,
        .number = Board_FieldNumber_BoardCreated,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(Board__storage_, boardCreated),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "userNickname",
        .dataTypeSpecific.className = NULL,
        .number = Board_FieldNumber_UserNickname,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(Board__storage_, userNickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Board class]
                                     rootClass:[BoardRoot class]
                                          file:BoardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Board__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BoardsRequest

@implementation BoardsRequest

@dynamic boardId;
@dynamic boardType;
@dynamic boardUniversity;
@dynamic scrollIs;

typedef struct BoardsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *boardType;
  NSString *boardUniversity;
  NSString *scrollIs;
  int64_t boardId;
} BoardsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "boardId",
        .dataTypeSpecific.className = NULL,
        .number = BoardsRequest_FieldNumber_BoardId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BoardsRequest__storage_, boardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "boardType",
        .dataTypeSpecific.className = NULL,
        .number = BoardsRequest_FieldNumber_BoardType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BoardsRequest__storage_, boardType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "boardUniversity",
        .dataTypeSpecific.className = NULL,
        .number = BoardsRequest_FieldNumber_BoardUniversity,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BoardsRequest__storage_, boardUniversity),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "scrollIs",
        .dataTypeSpecific.className = NULL,
        .number = BoardsRequest_FieldNumber_ScrollIs,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BoardsRequest__storage_, scrollIs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BoardsRequest class]
                                     rootClass:[BoardRoot class]
                                          file:BoardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BoardsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MyBoardsRequest

@implementation MyBoardsRequest

@dynamic userId;
@dynamic boardType;

typedef struct MyBoardsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *boardType;
  int64_t userId;
} MyBoardsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = MyBoardsRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MyBoardsRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "boardType",
        .dataTypeSpecific.className = NULL,
        .number = MyBoardsRequest_FieldNumber_BoardType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MyBoardsRequest__storage_, boardType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MyBoardsRequest class]
                                     rootClass:[BoardRoot class]
                                          file:BoardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MyBoardsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BoardsResponse

@implementation BoardsResponse

@dynamic boardsArray, boardsArray_Count;

typedef struct BoardsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *boardsArray;
} BoardsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "boardsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Board),
        .number = BoardsResponse_FieldNumber_BoardsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(BoardsResponse__storage_, boardsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BoardsResponse class]
                                     rootClass:[BoardRoot class]
                                          file:BoardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BoardsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateBoardRequest

@implementation CreateBoardRequest

@dynamic userId;
@dynamic boardType;
@dynamic boardUniversity;
@dynamic boardMajor;
@dynamic boardTitle;
@dynamic boardContent;

typedef struct CreateBoardRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *boardType;
  NSString *boardUniversity;
  NSString *boardMajor;
  NSString *boardTitle;
  NSString *boardContent;
  int64_t userId;
} CreateBoardRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = CreateBoardRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateBoardRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "boardType",
        .dataTypeSpecific.className = NULL,
        .number = CreateBoardRequest_FieldNumber_BoardType,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CreateBoardRequest__storage_, boardType),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "boardUniversity",
        .dataTypeSpecific.className = NULL,
        .number = CreateBoardRequest_FieldNumber_BoardUniversity,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CreateBoardRequest__storage_, boardUniversity),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "boardMajor",
        .dataTypeSpecific.className = NULL,
        .number = CreateBoardRequest_FieldNumber_BoardMajor,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CreateBoardRequest__storage_, boardMajor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "boardTitle",
        .dataTypeSpecific.className = NULL,
        .number = CreateBoardRequest_FieldNumber_BoardTitle,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CreateBoardRequest__storage_, boardTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "boardContent",
        .dataTypeSpecific.className = NULL,
        .number = CreateBoardRequest_FieldNumber_BoardContent,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CreateBoardRequest__storage_, boardContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateBoardRequest class]
                                     rootClass:[BoardRoot class]
                                          file:BoardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateBoardRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateBoardResponse

@implementation CreateBoardResponse

@dynamic success;

typedef struct CreateBoardResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *success;
} CreateBoardResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "success",
        .dataTypeSpecific.className = NULL,
        .number = CreateBoardResponse_FieldNumber_Success,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateBoardResponse__storage_, success),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateBoardResponse class]
                                     rootClass:[BoardRoot class]
                                          file:BoardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateBoardResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReviseMyBoardRequest

@implementation ReviseMyBoardRequest

@dynamic boardId;
@dynamic boardUniversity;
@dynamic boardMajor;
@dynamic boardTitle;
@dynamic boardContent;

typedef struct ReviseMyBoardRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *boardUniversity;
  NSString *boardMajor;
  NSString *boardTitle;
  NSString *boardContent;
  int64_t boardId;
} ReviseMyBoardRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "boardId",
        .dataTypeSpecific.className = NULL,
        .number = ReviseMyBoardRequest_FieldNumber_BoardId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReviseMyBoardRequest__storage_, boardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "boardUniversity",
        .dataTypeSpecific.className = NULL,
        .number = ReviseMyBoardRequest_FieldNumber_BoardUniversity,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReviseMyBoardRequest__storage_, boardUniversity),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "boardMajor",
        .dataTypeSpecific.className = NULL,
        .number = ReviseMyBoardRequest_FieldNumber_BoardMajor,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReviseMyBoardRequest__storage_, boardMajor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "boardTitle",
        .dataTypeSpecific.className = NULL,
        .number = ReviseMyBoardRequest_FieldNumber_BoardTitle,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ReviseMyBoardRequest__storage_, boardTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "boardContent",
        .dataTypeSpecific.className = NULL,
        .number = ReviseMyBoardRequest_FieldNumber_BoardContent,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ReviseMyBoardRequest__storage_, boardContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReviseMyBoardRequest class]
                                     rootClass:[BoardRoot class]
                                          file:BoardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReviseMyBoardRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReviseMyReviewRequest

@implementation ReviseMyReviewRequest

@dynamic boardId;
@dynamic boardUniversity;
@dynamic boardMajor;
@dynamic boardTitle;
@dynamic boardContent;

typedef struct ReviseMyReviewRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *boardUniversity;
  NSString *boardMajor;
  NSString *boardTitle;
  NSString *boardContent;
  int64_t boardId;
} ReviseMyReviewRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "boardId",
        .dataTypeSpecific.className = NULL,
        .number = ReviseMyReviewRequest_FieldNumber_BoardId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReviseMyReviewRequest__storage_, boardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "boardUniversity",
        .dataTypeSpecific.className = NULL,
        .number = ReviseMyReviewRequest_FieldNumber_BoardUniversity,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReviseMyReviewRequest__storage_, boardUniversity),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "boardMajor",
        .dataTypeSpecific.className = NULL,
        .number = ReviseMyReviewRequest_FieldNumber_BoardMajor,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReviseMyReviewRequest__storage_, boardMajor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "boardTitle",
        .dataTypeSpecific.className = NULL,
        .number = ReviseMyReviewRequest_FieldNumber_BoardTitle,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ReviseMyReviewRequest__storage_, boardTitle),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "boardContent",
        .dataTypeSpecific.className = NULL,
        .number = ReviseMyReviewRequest_FieldNumber_BoardContent,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ReviseMyReviewRequest__storage_, boardContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReviseMyReviewRequest class]
                                     rootClass:[BoardRoot class]
                                          file:BoardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReviseMyReviewRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BoardTouchRequest

@implementation BoardTouchRequest

@dynamic boardId;

typedef struct BoardTouchRequest__storage_ {
  uint32_t _has_storage_[1];
  int64_t boardId;
} BoardTouchRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "boardId",
        .dataTypeSpecific.className = NULL,
        .number = BoardTouchRequest_FieldNumber_BoardId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BoardTouchRequest__storage_, boardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BoardTouchRequest class]
                                     rootClass:[BoardRoot class]
                                          file:BoardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BoardTouchRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - BoardTouchResponse

@implementation BoardTouchResponse

@dynamic isDeleted;

typedef struct BoardTouchResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *isDeleted;
} BoardTouchResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isDeleted",
        .dataTypeSpecific.className = NULL,
        .number = BoardTouchResponse_FieldNumber_IsDeleted,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BoardTouchResponse__storage_, isDeleted),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BoardTouchResponse class]
                                     rootClass:[BoardRoot class]
                                          file:BoardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BoardTouchResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - DeleteMyBoardRequest

@implementation DeleteMyBoardRequest

@dynamic boardId;

typedef struct DeleteMyBoardRequest__storage_ {
  uint32_t _has_storage_[1];
  int64_t boardId;
} DeleteMyBoardRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "boardId",
        .dataTypeSpecific.className = NULL,
        .number = DeleteMyBoardRequest_FieldNumber_BoardId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(DeleteMyBoardRequest__storage_, boardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteMyBoardRequest class]
                                     rootClass:[BoardRoot class]
                                          file:BoardRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteMyBoardRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
