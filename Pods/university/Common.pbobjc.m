// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

 #import "Common.pbobjc.h"
 #import "Board.pbobjc.h"
 #import "Mentor.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"

#pragma mark - CommonRoot

@implementation CommonRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - CommonRoot_FileDescriptor

static GPBFileDescriptor *CommonRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@""
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - Comment

@implementation Comment

@dynamic commentId;
@dynamic boardId;
@dynamic userId;
@dynamic receiverId;
@dynamic userNickname;
@dynamic commentContent;
@dynamic commentCreated;

typedef struct Comment__storage_ {
  uint32_t _has_storage_[1];
  NSString *userNickname;
  NSString *commentContent;
  NSString *commentCreated;
  int64_t commentId;
  int64_t boardId;
  int64_t userId;
  int64_t receiverId;
} Comment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commentId",
        .dataTypeSpecific.className = NULL,
        .number = Comment_FieldNumber_CommentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(Comment__storage_, commentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "boardId",
        .dataTypeSpecific.className = NULL,
        .number = Comment_FieldNumber_BoardId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(Comment__storage_, boardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = Comment_FieldNumber_UserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(Comment__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "receiverId",
        .dataTypeSpecific.className = NULL,
        .number = Comment_FieldNumber_ReceiverId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(Comment__storage_, receiverId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userNickname",
        .dataTypeSpecific.className = NULL,
        .number = Comment_FieldNumber_UserNickname,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(Comment__storage_, userNickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "commentContent",
        .dataTypeSpecific.className = NULL,
        .number = Comment_FieldNumber_CommentContent,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(Comment__storage_, commentContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "commentCreated",
        .dataTypeSpecific.className = NULL,
        .number = Comment_FieldNumber_CommentCreated,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(Comment__storage_, commentCreated),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[Comment class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(Comment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RepliedComment

@implementation RepliedComment

@dynamic commentReplyId;
@dynamic commentId;
@dynamic boardId;
@dynamic userId;
@dynamic receiverId;
@dynamic userNickname;
@dynamic commentContent;
@dynamic commentCreated;

typedef struct RepliedComment__storage_ {
  uint32_t _has_storage_[1];
  NSString *userNickname;
  NSString *commentContent;
  NSString *commentCreated;
  int64_t commentReplyId;
  int64_t commentId;
  int64_t boardId;
  int64_t userId;
  int64_t receiverId;
} RepliedComment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commentReplyId",
        .dataTypeSpecific.className = NULL,
        .number = RepliedComment_FieldNumber_CommentReplyId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RepliedComment__storage_, commentReplyId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "commentId",
        .dataTypeSpecific.className = NULL,
        .number = RepliedComment_FieldNumber_CommentId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RepliedComment__storage_, commentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "boardId",
        .dataTypeSpecific.className = NULL,
        .number = RepliedComment_FieldNumber_BoardId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RepliedComment__storage_, boardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RepliedComment_FieldNumber_UserId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RepliedComment__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "receiverId",
        .dataTypeSpecific.className = NULL,
        .number = RepliedComment_FieldNumber_ReceiverId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RepliedComment__storage_, receiverId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userNickname",
        .dataTypeSpecific.className = NULL,
        .number = RepliedComment_FieldNumber_UserNickname,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RepliedComment__storage_, userNickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "commentContent",
        .dataTypeSpecific.className = NULL,
        .number = RepliedComment_FieldNumber_CommentContent,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RepliedComment__storage_, commentContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "commentCreated",
        .dataTypeSpecific.className = NULL,
        .number = RepliedComment_FieldNumber_CommentCreated,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RepliedComment__storage_, commentCreated),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RepliedComment class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RepliedComment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CommentUploadRequest

@implementation CommentUploadRequest

@dynamic boardId;
@dynamic userId;
@dynamic userNickname;
@dynamic commentContent;
@dynamic receiverId;

typedef struct CommentUploadRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userNickname;
  NSString *commentContent;
  int64_t boardId;
  int64_t userId;
  int64_t receiverId;
} CommentUploadRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "boardId",
        .dataTypeSpecific.className = NULL,
        .number = CommentUploadRequest_FieldNumber_BoardId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CommentUploadRequest__storage_, boardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = CommentUploadRequest_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CommentUploadRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userNickname",
        .dataTypeSpecific.className = NULL,
        .number = CommentUploadRequest_FieldNumber_UserNickname,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CommentUploadRequest__storage_, userNickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "commentContent",
        .dataTypeSpecific.className = NULL,
        .number = CommentUploadRequest_FieldNumber_CommentContent,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CommentUploadRequest__storage_, commentContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "receiverId",
        .dataTypeSpecific.className = NULL,
        .number = CommentUploadRequest_FieldNumber_ReceiverId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CommentUploadRequest__storage_, receiverId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CommentUploadRequest class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CommentUploadRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RepliedCommentUploadRequest

@implementation RepliedCommentUploadRequest

@dynamic commentId;
@dynamic boardId;
@dynamic userId;
@dynamic userNickname;
@dynamic commentContent;
@dynamic receiverId;

typedef struct RepliedCommentUploadRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userNickname;
  NSString *commentContent;
  int64_t commentId;
  int64_t boardId;
  int64_t userId;
  int64_t receiverId;
} RepliedCommentUploadRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commentId",
        .dataTypeSpecific.className = NULL,
        .number = RepliedCommentUploadRequest_FieldNumber_CommentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RepliedCommentUploadRequest__storage_, commentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "boardId",
        .dataTypeSpecific.className = NULL,
        .number = RepliedCommentUploadRequest_FieldNumber_BoardId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RepliedCommentUploadRequest__storage_, boardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RepliedCommentUploadRequest_FieldNumber_UserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RepliedCommentUploadRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userNickname",
        .dataTypeSpecific.className = NULL,
        .number = RepliedCommentUploadRequest_FieldNumber_UserNickname,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RepliedCommentUploadRequest__storage_, userNickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "commentContent",
        .dataTypeSpecific.className = NULL,
        .number = RepliedCommentUploadRequest_FieldNumber_CommentContent,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RepliedCommentUploadRequest__storage_, commentContent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "receiverId",
        .dataTypeSpecific.className = NULL,
        .number = RepliedCommentUploadRequest_FieldNumber_ReceiverId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RepliedCommentUploadRequest__storage_, receiverId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RepliedCommentUploadRequest class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RepliedCommentUploadRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetCommentsRequest

@implementation GetCommentsRequest

@dynamic boardId;
@dynamic commentId;
@dynamic scrollIs;

typedef struct GetCommentsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *scrollIs;
  int64_t boardId;
  int64_t commentId;
} GetCommentsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "boardId",
        .dataTypeSpecific.className = NULL,
        .number = GetCommentsRequest_FieldNumber_BoardId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetCommentsRequest__storage_, boardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "commentId",
        .dataTypeSpecific.className = NULL,
        .number = GetCommentsRequest_FieldNumber_CommentId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetCommentsRequest__storage_, commentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "scrollIs",
        .dataTypeSpecific.className = NULL,
        .number = GetCommentsRequest_FieldNumber_ScrollIs,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetCommentsRequest__storage_, scrollIs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetCommentsRequest class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetCommentsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetRepliedCommentsRequest

@implementation GetRepliedCommentsRequest

@dynamic commentReplyId;
@dynamic commentId;
@dynamic scrollIs;

typedef struct GetRepliedCommentsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *scrollIs;
  int64_t commentReplyId;
  int64_t commentId;
} GetRepliedCommentsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commentReplyId",
        .dataTypeSpecific.className = NULL,
        .number = GetRepliedCommentsRequest_FieldNumber_CommentReplyId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetRepliedCommentsRequest__storage_, commentReplyId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "commentId",
        .dataTypeSpecific.className = NULL,
        .number = GetRepliedCommentsRequest_FieldNumber_CommentId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetRepliedCommentsRequest__storage_, commentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "scrollIs",
        .dataTypeSpecific.className = NULL,
        .number = GetRepliedCommentsRequest_FieldNumber_ScrollIs,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetRepliedCommentsRequest__storage_, scrollIs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetRepliedCommentsRequest class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetRepliedCommentsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetCommentsResponse

@implementation GetCommentsResponse

@dynamic commentsArray, commentsArray_Count;

typedef struct GetCommentsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *commentsArray;
} GetCommentsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Comment),
        .number = GetCommentsResponse_FieldNumber_CommentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetCommentsResponse__storage_, commentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetCommentsResponse class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetCommentsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetRepliedCommentsResponse

@implementation GetRepliedCommentsResponse

@dynamic commentsArray, commentsArray_Count;

typedef struct GetRepliedCommentsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *commentsArray;
} GetRepliedCommentsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RepliedComment),
        .number = GetRepliedCommentsResponse_FieldNumber_CommentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetRepliedCommentsResponse__storage_, commentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetRepliedCommentsResponse class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetRepliedCommentsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetCommentsCountRequest

@implementation GetCommentsCountRequest

@dynamic boardId;

typedef struct GetCommentsCountRequest__storage_ {
  uint32_t _has_storage_[1];
  int64_t boardId;
} GetCommentsCountRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "boardId",
        .dataTypeSpecific.className = NULL,
        .number = GetCommentsCountRequest_FieldNumber_BoardId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetCommentsCountRequest__storage_, boardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetCommentsCountRequest class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetCommentsCountRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetCommentsCountResponse

@implementation GetCommentsCountResponse

@dynamic count;

typedef struct GetCommentsCountResponse__storage_ {
  uint32_t _has_storage_[1];
  int64_t count;
} GetCommentsCountResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GetCommentsCountResponse_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetCommentsCountResponse__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetCommentsCountResponse class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetCommentsCountResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MentorComment

@implementation MentorComment

@dynamic commentId;
@dynamic mentorId;
@dynamic userId;
@dynamic receiverId;
@dynamic userNickname;
@dynamic profileurl;
@dynamic content;
@dynamic commentCreated;

typedef struct MentorComment__storage_ {
  uint32_t _has_storage_[1];
  NSString *userNickname;
  NSString *profileurl;
  NSString *content;
  NSString *commentCreated;
  int64_t commentId;
  int64_t mentorId;
  int64_t userId;
  int64_t receiverId;
} MentorComment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commentId",
        .dataTypeSpecific.className = NULL,
        .number = MentorComment_FieldNumber_CommentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MentorComment__storage_, commentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "mentorId",
        .dataTypeSpecific.className = NULL,
        .number = MentorComment_FieldNumber_MentorId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MentorComment__storage_, mentorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = MentorComment_FieldNumber_UserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MentorComment__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "receiverId",
        .dataTypeSpecific.className = NULL,
        .number = MentorComment_FieldNumber_ReceiverId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MentorComment__storage_, receiverId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userNickname",
        .dataTypeSpecific.className = NULL,
        .number = MentorComment_FieldNumber_UserNickname,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MentorComment__storage_, userNickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "profileurl",
        .dataTypeSpecific.className = NULL,
        .number = MentorComment_FieldNumber_Profileurl,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(MentorComment__storage_, profileurl),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = MentorComment_FieldNumber_Content,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(MentorComment__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "commentCreated",
        .dataTypeSpecific.className = NULL,
        .number = MentorComment_FieldNumber_CommentCreated,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(MentorComment__storage_, commentCreated),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MentorComment class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MentorComment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - RepliedMentorComment

@implementation RepliedMentorComment

@dynamic repliedCommentId;
@dynamic commentId;
@dynamic mentorId;
@dynamic userId;
@dynamic receiverId;
@dynamic userNickname;
@dynamic profileurl;
@dynamic content;
@dynamic commentCreated;

typedef struct RepliedMentorComment__storage_ {
  uint32_t _has_storage_[1];
  NSString *userNickname;
  NSString *profileurl;
  NSString *content;
  NSString *commentCreated;
  int64_t repliedCommentId;
  int64_t commentId;
  int64_t mentorId;
  int64_t userId;
  int64_t receiverId;
} RepliedMentorComment__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "repliedCommentId",
        .dataTypeSpecific.className = NULL,
        .number = RepliedMentorComment_FieldNumber_RepliedCommentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(RepliedMentorComment__storage_, repliedCommentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "commentId",
        .dataTypeSpecific.className = NULL,
        .number = RepliedMentorComment_FieldNumber_CommentId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(RepliedMentorComment__storage_, commentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "mentorId",
        .dataTypeSpecific.className = NULL,
        .number = RepliedMentorComment_FieldNumber_MentorId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(RepliedMentorComment__storage_, mentorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = RepliedMentorComment_FieldNumber_UserId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(RepliedMentorComment__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "receiverId",
        .dataTypeSpecific.className = NULL,
        .number = RepliedMentorComment_FieldNumber_ReceiverId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(RepliedMentorComment__storage_, receiverId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userNickname",
        .dataTypeSpecific.className = NULL,
        .number = RepliedMentorComment_FieldNumber_UserNickname,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(RepliedMentorComment__storage_, userNickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "profileurl",
        .dataTypeSpecific.className = NULL,
        .number = RepliedMentorComment_FieldNumber_Profileurl,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(RepliedMentorComment__storage_, profileurl),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = RepliedMentorComment_FieldNumber_Content,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(RepliedMentorComment__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "commentCreated",
        .dataTypeSpecific.className = NULL,
        .number = RepliedMentorComment_FieldNumber_CommentCreated,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(RepliedMentorComment__storage_, commentCreated),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[RepliedMentorComment class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(RepliedMentorComment__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UploadMentorCommentRequest

@implementation UploadMentorCommentRequest

@dynamic mentorId;
@dynamic userId;
@dynamic userNickname;
@dynamic profileurl;
@dynamic content;
@dynamic receiverId;

typedef struct UploadMentorCommentRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userNickname;
  NSString *profileurl;
  NSString *content;
  int64_t mentorId;
  int64_t userId;
  int64_t receiverId;
} UploadMentorCommentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mentorId",
        .dataTypeSpecific.className = NULL,
        .number = UploadMentorCommentRequest_FieldNumber_MentorId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UploadMentorCommentRequest__storage_, mentorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = UploadMentorCommentRequest_FieldNumber_UserId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UploadMentorCommentRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userNickname",
        .dataTypeSpecific.className = NULL,
        .number = UploadMentorCommentRequest_FieldNumber_UserNickname,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UploadMentorCommentRequest__storage_, userNickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "profileurl",
        .dataTypeSpecific.className = NULL,
        .number = UploadMentorCommentRequest_FieldNumber_Profileurl,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UploadMentorCommentRequest__storage_, profileurl),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = UploadMentorCommentRequest_FieldNumber_Content,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UploadMentorCommentRequest__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "receiverId",
        .dataTypeSpecific.className = NULL,
        .number = UploadMentorCommentRequest_FieldNumber_ReceiverId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UploadMentorCommentRequest__storage_, receiverId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UploadMentorCommentRequest class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UploadMentorCommentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UploadRepliedMentorCommentRequest

@implementation UploadRepliedMentorCommentRequest

@dynamic commentId;
@dynamic mentorId;
@dynamic userId;
@dynamic userNickname;
@dynamic profileurl;
@dynamic content;
@dynamic receiverId;

typedef struct UploadRepliedMentorCommentRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *userNickname;
  NSString *profileurl;
  NSString *content;
  int64_t commentId;
  int64_t mentorId;
  int64_t userId;
  int64_t receiverId;
} UploadRepliedMentorCommentRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commentId",
        .dataTypeSpecific.className = NULL,
        .number = UploadRepliedMentorCommentRequest_FieldNumber_CommentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UploadRepliedMentorCommentRequest__storage_, commentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "mentorId",
        .dataTypeSpecific.className = NULL,
        .number = UploadRepliedMentorCommentRequest_FieldNumber_MentorId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UploadRepliedMentorCommentRequest__storage_, mentorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = UploadRepliedMentorCommentRequest_FieldNumber_UserId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UploadRepliedMentorCommentRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "userNickname",
        .dataTypeSpecific.className = NULL,
        .number = UploadRepliedMentorCommentRequest_FieldNumber_UserNickname,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UploadRepliedMentorCommentRequest__storage_, userNickname),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "profileurl",
        .dataTypeSpecific.className = NULL,
        .number = UploadRepliedMentorCommentRequest_FieldNumber_Profileurl,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(UploadRepliedMentorCommentRequest__storage_, profileurl),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "content",
        .dataTypeSpecific.className = NULL,
        .number = UploadRepliedMentorCommentRequest_FieldNumber_Content,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(UploadRepliedMentorCommentRequest__storage_, content),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "receiverId",
        .dataTypeSpecific.className = NULL,
        .number = UploadRepliedMentorCommentRequest_FieldNumber_ReceiverId,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(UploadRepliedMentorCommentRequest__storage_, receiverId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UploadRepliedMentorCommentRequest class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UploadRepliedMentorCommentRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMentorCommentsRequest

@implementation GetMentorCommentsRequest

@dynamic mentorId;
@dynamic commentId;
@dynamic scrollIs;

typedef struct GetMentorCommentsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *scrollIs;
  int64_t mentorId;
  int64_t commentId;
} GetMentorCommentsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mentorId",
        .dataTypeSpecific.className = NULL,
        .number = GetMentorCommentsRequest_FieldNumber_MentorId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetMentorCommentsRequest__storage_, mentorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "commentId",
        .dataTypeSpecific.className = NULL,
        .number = GetMentorCommentsRequest_FieldNumber_CommentId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetMentorCommentsRequest__storage_, commentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "scrollIs",
        .dataTypeSpecific.className = NULL,
        .number = GetMentorCommentsRequest_FieldNumber_ScrollIs,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetMentorCommentsRequest__storage_, scrollIs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMentorCommentsRequest class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMentorCommentsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetRepliedMentorCommentsRequest

@implementation GetRepliedMentorCommentsRequest

@dynamic repliedCommentId;
@dynamic commentId;
@dynamic scrollIs;

typedef struct GetRepliedMentorCommentsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *scrollIs;
  int64_t repliedCommentId;
  int64_t commentId;
} GetRepliedMentorCommentsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "repliedCommentId",
        .dataTypeSpecific.className = NULL,
        .number = GetRepliedMentorCommentsRequest_FieldNumber_RepliedCommentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetRepliedMentorCommentsRequest__storage_, repliedCommentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "commentId",
        .dataTypeSpecific.className = NULL,
        .number = GetRepliedMentorCommentsRequest_FieldNumber_CommentId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GetRepliedMentorCommentsRequest__storage_, commentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "scrollIs",
        .dataTypeSpecific.className = NULL,
        .number = GetRepliedMentorCommentsRequest_FieldNumber_ScrollIs,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetRepliedMentorCommentsRequest__storage_, scrollIs),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetRepliedMentorCommentsRequest class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetRepliedMentorCommentsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMentorCommentsResponse

@implementation GetMentorCommentsResponse

@dynamic commentsArray, commentsArray_Count;

typedef struct GetMentorCommentsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *commentsArray;
} GetMentorCommentsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MentorComment),
        .number = GetMentorCommentsResponse_FieldNumber_CommentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetMentorCommentsResponse__storage_, commentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMentorCommentsResponse class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMentorCommentsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetRepliedMentorCommentsResponse

@implementation GetRepliedMentorCommentsResponse

@dynamic commentsArray, commentsArray_Count;

typedef struct GetRepliedMentorCommentsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *commentsArray;
} GetRepliedMentorCommentsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RepliedMentorComment),
        .number = GetRepliedMentorCommentsResponse_FieldNumber_CommentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetRepliedMentorCommentsResponse__storage_, commentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetRepliedMentorCommentsResponse class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetRepliedMentorCommentsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMentorCommentsCountRequest

@implementation GetMentorCommentsCountRequest

@dynamic mentorId;

typedef struct GetMentorCommentsCountRequest__storage_ {
  uint32_t _has_storage_[1];
  int64_t mentorId;
} GetMentorCommentsCountRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mentorId",
        .dataTypeSpecific.className = NULL,
        .number = GetMentorCommentsCountRequest_FieldNumber_MentorId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetMentorCommentsCountRequest__storage_, mentorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMentorCommentsCountRequest class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMentorCommentsCountRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMentorCommentsCountResponse

@implementation GetMentorCommentsCountResponse

@dynamic count;

typedef struct GetMentorCommentsCountResponse__storage_ {
  uint32_t _has_storage_[1];
  int64_t count;
} GetMentorCommentsCountResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = GetMentorCommentsCountResponse_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetMentorCommentsCountResponse__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMentorCommentsCountResponse class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMentorCommentsCountResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSharedCommentsRequest

@implementation GetSharedCommentsRequest

@dynamic userId;

typedef struct GetSharedCommentsRequest__storage_ {
  uint32_t _has_storage_[1];
  int64_t userId;
} GetSharedCommentsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = GetSharedCommentsRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetSharedCommentsRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSharedCommentsRequest class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSharedCommentsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetSharedCommentsResponse

@implementation GetSharedCommentsResponse

@dynamic commentsArray, commentsArray_Count;
@dynamic repliedCommentsArray, repliedCommentsArray_Count;
@dynamic mentorCommentsArray, mentorCommentsArray_Count;
@dynamic repliedMentorCommentsArray, repliedMentorCommentsArray_Count;

typedef struct GetSharedCommentsResponse__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *commentsArray;
  NSMutableArray *repliedCommentsArray;
  NSMutableArray *mentorCommentsArray;
  NSMutableArray *repliedMentorCommentsArray;
} GetSharedCommentsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(Comment),
        .number = GetSharedCommentsResponse_FieldNumber_CommentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetSharedCommentsResponse__storage_, commentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "repliedCommentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RepliedComment),
        .number = GetSharedCommentsResponse_FieldNumber_RepliedCommentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetSharedCommentsResponse__storage_, repliedCommentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "mentorCommentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(MentorComment),
        .number = GetSharedCommentsResponse_FieldNumber_MentorCommentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetSharedCommentsResponse__storage_, mentorCommentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "repliedMentorCommentsArray",
        .dataTypeSpecific.className = GPBStringifySymbol(RepliedMentorComment),
        .number = GetSharedCommentsResponse_FieldNumber_RepliedMentorCommentsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(GetSharedCommentsResponse__storage_, repliedMentorCommentsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetSharedCommentsResponse class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetSharedCommentsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBoardObjectRequest

@implementation GetBoardObjectRequest

@dynamic boardId;

typedef struct GetBoardObjectRequest__storage_ {
  uint32_t _has_storage_[1];
  int64_t boardId;
} GetBoardObjectRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "boardId",
        .dataTypeSpecific.className = NULL,
        .number = GetBoardObjectRequest_FieldNumber_BoardId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBoardObjectRequest__storage_, boardId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBoardObjectRequest class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBoardObjectRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetBoardObjectResponse

@implementation GetBoardObjectResponse

@dynamic hasBoard, board;

typedef struct GetBoardObjectResponse__storage_ {
  uint32_t _has_storage_[1];
  Board *board;
} GetBoardObjectResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "board",
        .dataTypeSpecific.className = GPBStringifySymbol(Board),
        .number = GetBoardObjectResponse_FieldNumber_Board,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetBoardObjectResponse__storage_, board),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetBoardObjectResponse class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetBoardObjectResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetCommentObjectRequest

@implementation GetCommentObjectRequest

@dynamic commentId;

typedef struct GetCommentObjectRequest__storage_ {
  uint32_t _has_storage_[1];
  int64_t commentId;
} GetCommentObjectRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commentId",
        .dataTypeSpecific.className = NULL,
        .number = GetCommentObjectRequest_FieldNumber_CommentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetCommentObjectRequest__storage_, commentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetCommentObjectRequest class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetCommentObjectRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetCommentObjectResponse

@implementation GetCommentObjectResponse

@dynamic hasComment, comment;

typedef struct GetCommentObjectResponse__storage_ {
  uint32_t _has_storage_[1];
  Comment *comment;
} GetCommentObjectResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "comment",
        .dataTypeSpecific.className = GPBStringifySymbol(Comment),
        .number = GetCommentObjectResponse_FieldNumber_Comment,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetCommentObjectResponse__storage_, comment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetCommentObjectResponse class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetCommentObjectResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMentorObjectRequest

@implementation GetMentorObjectRequest

@dynamic mentorId;

typedef struct GetMentorObjectRequest__storage_ {
  uint32_t _has_storage_[1];
  int64_t mentorId;
} GetMentorObjectRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mentorId",
        .dataTypeSpecific.className = NULL,
        .number = GetMentorObjectRequest_FieldNumber_MentorId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetMentorObjectRequest__storage_, mentorId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMentorObjectRequest class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMentorObjectRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMentorObjectResponse

@implementation GetMentorObjectResponse

@dynamic hasMentor, mentor;

typedef struct GetMentorObjectResponse__storage_ {
  uint32_t _has_storage_[1];
  Mentor *mentor;
} GetMentorObjectResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "mentor",
        .dataTypeSpecific.className = GPBStringifySymbol(Mentor),
        .number = GetMentorObjectResponse_FieldNumber_Mentor,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetMentorObjectResponse__storage_, mentor),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMentorObjectResponse class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMentorObjectResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMentorCommentObjectRequest

@implementation GetMentorCommentObjectRequest

@dynamic commentId;

typedef struct GetMentorCommentObjectRequest__storage_ {
  uint32_t _has_storage_[1];
  int64_t commentId;
} GetMentorCommentObjectRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "commentId",
        .dataTypeSpecific.className = NULL,
        .number = GetMentorCommentObjectRequest_FieldNumber_CommentId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetMentorCommentObjectRequest__storage_, commentId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMentorCommentObjectRequest class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMentorCommentObjectRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetMentorCommentObjectResponse

@implementation GetMentorCommentObjectResponse

@dynamic hasComment, comment;

typedef struct GetMentorCommentObjectResponse__storage_ {
  uint32_t _has_storage_[1];
  MentorComment *comment;
} GetMentorCommentObjectResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "comment",
        .dataTypeSpecific.className = GPBStringifySymbol(MentorComment),
        .number = GetMentorCommentObjectResponse_FieldNumber_Comment,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GetMentorCommentObjectResponse__storage_, comment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetMentorCommentObjectResponse class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetMentorCommentObjectResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CheckIfThereIsNewCommentsRequest

@implementation CheckIfThereIsNewCommentsRequest

@dynamic userId;
@dynamic date;

typedef struct CheckIfThereIsNewCommentsRequest__storage_ {
  uint32_t _has_storage_[1];
  NSString *date;
  int64_t userId;
} CheckIfThereIsNewCommentsRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "userId",
        .dataTypeSpecific.className = NULL,
        .number = CheckIfThereIsNewCommentsRequest_FieldNumber_UserId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CheckIfThereIsNewCommentsRequest__storage_, userId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "date",
        .dataTypeSpecific.className = NULL,
        .number = CheckIfThereIsNewCommentsRequest_FieldNumber_Date,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CheckIfThereIsNewCommentsRequest__storage_, date),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CheckIfThereIsNewCommentsRequest class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CheckIfThereIsNewCommentsRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CheckIfThereIsNewCommentsResponse

@implementation CheckIfThereIsNewCommentsResponse

@dynamic count;

typedef struct CheckIfThereIsNewCommentsResponse__storage_ {
  uint32_t _has_storage_[1];
  int64_t count;
} CheckIfThereIsNewCommentsResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "count",
        .dataTypeSpecific.className = NULL,
        .number = CheckIfThereIsNewCommentsResponse_FieldNumber_Count,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CheckIfThereIsNewCommentsResponse__storage_, count),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CheckIfThereIsNewCommentsResponse class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CheckIfThereIsNewCommentsResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CheckIfItsDeletedRequest

@implementation CheckIfItsDeletedRequest

@dynamic id_p;
@dynamic type;

typedef struct CheckIfItsDeletedRequest__storage_ {
  uint32_t _has_storage_[1];
  int64_t id_p;
  int64_t type;
} CheckIfItsDeletedRequest__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "id_p",
        .dataTypeSpecific.className = NULL,
        .number = CheckIfItsDeletedRequest_FieldNumber_Id_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CheckIfItsDeletedRequest__storage_, id_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
      {
        .name = "type",
        .dataTypeSpecific.className = NULL,
        .number = CheckIfItsDeletedRequest_FieldNumber_Type,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CheckIfItsDeletedRequest__storage_, type),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeInt64,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CheckIfItsDeletedRequest class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CheckIfItsDeletedRequest__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CheckIfItsDeletedResponse

@implementation CheckIfItsDeletedResponse

@dynamic isDeleted;

typedef struct CheckIfItsDeletedResponse__storage_ {
  uint32_t _has_storage_[1];
  NSString *isDeleted;
} CheckIfItsDeletedResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "isDeleted",
        .dataTypeSpecific.className = NULL,
        .number = CheckIfItsDeletedResponse_FieldNumber_IsDeleted,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CheckIfItsDeletedResponse__storage_, isDeleted),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CheckIfItsDeletedResponse class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CheckIfItsDeletedResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - EmptyResponse

@implementation EmptyResponse


typedef struct EmptyResponse__storage_ {
  uint32_t _has_storage_[1];
} EmptyResponse__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[EmptyResponse class]
                                     rootClass:[CommonRoot class]
                                          file:CommonRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(EmptyResponse__storage_)
                                         flags:GPBDescriptorInitializationFlag_None];
    NSAssert(descriptor == nil, @"Startup recursed!");
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
